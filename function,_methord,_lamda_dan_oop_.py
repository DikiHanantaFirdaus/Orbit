# -*- coding: utf-8 -*-
"""Function, Methord, Lamda dan OOP .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g2fgoYLohAao13Th3-KY0LQgPPzF5JXg

# **Fungsi**
"""



# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

# Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("Diki Hananta Firdaus")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

# Deklarasi Fungsi dengan pengembalian
def tambah(x, y, z):
  return x + y * z;

# Memanggil Fungsi
print(tambah(2, 3, 10))

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'



"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

# Deklarasi Object (Class)
class Tikus(object):
  def curut(self):
    print("Jijik")

# Memanggil method
rat = Tikus()
rat.curut()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

# Lambda expression 
greeting = lambda name: print(f"Hello, {name}")
sapa = greeting
greeting("Diki Ganteng")
sapa("Kawan")

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, usia, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.tidur(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)
"""

# Class Mahasiswa

class Mahasiswa(object):
  def __init__(self, nim, nama, jenkel, alamat, jurusan, angkatan, presensi, nilai, ipk, tagihan):
    self.nim = nim
    self.nama = nama
    self.jenkel = jenkel
    self.alamat = alamat
    self.jurusan = jurusan
    self.angkatan = angkatan
    self.presensi = presensi
    self.nilai = nilai
    self.ipk = ipk
    self.tagihan = tagihan
  
  def BayarKuliah(self):
    print('Total tagihan =', self.tagihan)
  
  def IkutKelas(self):
    print('Data Science, NLP, Computer Vision, Kewirausahaan')
  
  def IkutUjian(self):
    print('Proposal Bisnis')
  
  def LihatNilai(self):
    print(f'IPK Anda: {self.ipk}, nilai anda: {self.nilai}, presensi Anda: {self.presensi} %')

#Encapsulation
# Enkapsulation
barang = "Meja belajar"
bahan = "Kayu Jati"
warna = "coklat"
jumlah = 2

def jenis():
  print("Meja Belajar olympics")

def info_meja(barang, bahan, warna, jumlah):
  print(f"barang : {barang}, bahan : {bahan}, warna : {warna}, jumlah : {jumlah}")

info_meja(barang, bahan, warna, jumlah)


class Meja:
  def __init__(self, barang, bahan, warna, jumlah):
    self.barang = barang
    self.bahan = bahan
    self.warna = warna
    self.jumlah = jumlah

  def myluv(self):
    print("Barang yang sering digunakan " + self.barang)
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, warna : {self.warna}, jumlah : {self.jumlah}")


mejaku = Meja("Meja belajar", "Kayu Jati", "coklat", 2)

mejaku.info()

#Abstraction 
mejaku.myluv()

# Inheritence

class Benda(object):
  def __init__(self, barang, bahan, kokoh):
    self.barang = barang
    self.bahan = bahan
    self.kokoh = kokoh

  def tinggi(self, berapa):
    for x in range(berapa):
      print("Tingginya 130 cm")

  def info(self):
    print(f"barang : {self.barang}, bahan : {self.bahan}, kokoh: {self.kokoh}")


object1 = Benda("Meja", "Kayu Jati",  True)

object1.info()

class Meja(Benda):
  def __init__(self,  barang, bahan, kokoh, warna,jumlah, guna):
    super().__init__(barang, bahan, kokoh)
    self.warna = warna
    self.jumlah = jumlah
    self.guna = guna
  
  def jenis(self):
    print("Meja Belajar Osweet")

  def info_benda(self):
    print(f"warna : {self.warna}, jumlah: {self.jumlah}, guna : {self.guna}")
# warna :{self.warna},

bendaku = Meja("Meja", "Kayu Jati",  True, "coklat", 2, "sebagai alas")

bendaku.info()
bendaku.info_benda()

# Polymorphism
class Kursi(Benda):
  def __init__(self,  barang, bahan, kokoh, warna, model, jenis_guna):
    super().__init__(barang, bahan, kokoh)
    self.warna = warna
    self.model = model
    self.jenis_guna = jenis_guna
  
  def panjang(self, berapa):
    print("Bisa buat rebahan....")

  def info_kursi(self):
    print(f"warna : {self.warna}, model : {self.model}, jenis guna : {self.jenis_guna}")

kursiku = Kursi("Kursi Tamu", "Kayu Jati",  False, "Coklat muda", "Kursi panjang resban", "Kursi tunggu")

kursiku.info()
kursiku.info_kursi()
kursiku.tinggi(3)

"""##OOP DIKI HF"""

# Super Class
class Person(object):
  def __init__(self, nama, jenkel, alamat, no_wa):
    self.nama = nama
    self.jenkel = jenkel
    self.alamat = alamat
    self.no_wa = no_wa

# Subclass 1
class Mahasiswa(Person):
  def __init__(self, nama, jenkel, alamat, no_wa, nim, jurusan):
    super().__init__(nama, jenkel, alamat, no_wa)
    self.nim = nim
    self.jurusan = jurusan

  def BayarKuliah():
    pass # Syntax pass artinya method ini dilewati (tidak memiliki isi)
  
  def IkutKelas():
    pass
  
  def LihatNilai():
    pass

# Subclass 2
class Dosen(Person):
  def __init__(self, nama, jenkel, alamat, no_wa, nidn, spesialisasi, jumlah_ngajar_sks):
    super().__init__(nama, jenkel, alamat, no_wa)
    self.nidn = nidn
    self.spesialisasi = spesialisasi
    self.jumlah_ngajar_sks = jumlah_ngajar_sks

  def MengisiKelas():
    pass
  
  def SetNilai():
    pass
  
  def MendapatGaji():
    pass

# Subclass 3
class Karyawan(Person):
  def __init__(self, nama, jenkel, alamat, no_wa, nik, divisi, gaji_pokok, lembur):
    super().__init__(nama, jenkel, alamat, no_wa)
    self.nik = nik
    self.divisi = divisi
    self.gaji_pokok = gaji_pokok
    self.lembur = lembur

  def MelayaniMahasiswa():
    pass
  
  def BuatLaporan():
    pass
  
  def MendapatGaji():
    pass

# Super Class
class Person(object):
  def __init__(self, nama, jenkel, alamat, no_wa):
    self.nama = nama
    self.jenkel = jenkel
    self.alamat = alamat
    self.no_wa = no_wa
  
  def MendapatGaji(): # <- Polymorphism
    pass

# Subclass 1
class Dosen(Person):
  def __init__(self, nama, jenkel, alamat, no_wa, nidn, spesialisasi, jumlah_ngajar_sks):
    super().__init__(nama, jenkel, alamat, no_wa)
    self.nidn = nidn
    self.spesialisasi = spesialisasi
    self.jumlah_ngajar_sks = jumlah_ngajar_sks

  def MengisiKelas():
    pass
  
  def SetNilai():
    pass
  
  def MendapatGaji(): # <- Polymorphism (method warisan, tetapi isinya berbeda pada tiap objek)
    return self.jumlah_ngajar_sks * 500000

# Subclass 2
class Karyawan(Person):
  def __init__(self, nama, jenkel, alamat, no_wa, nik, divisi, gaji_pokok, lembur):
    super().__init__(nama, jenkel, alamat, no_wa)
    self.nik = nik
    self.divisi = divisi
    self.gaji_pokok = gaji_pokok
    self.lembur = lembur

  def MelayaniMahasiswa():
    pass
  
  def BuatLaporan():
    pass
  
  def MendapatGaji(): # <- Polymorphism (method warisan, tetapi isinya berbeda pada tiap objek)
    return self.gaji_pokok + self.lembur

"""# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1 
# O(1)
arr = [1, 2, 3, 4, 5]

print(arr[0])
print(arr[1])

# 2
# O(n)
print(arr[2])
for number in arr:
  print(number)
print(arr[1])
print(arr[2])

# 3
# O(n)
arr2 = [6, 7, 8, 9, 10]

for number in arr:
  print(number)
for number in arr2:
  print(number)
print(arr2[4])

# 4
# O(n)
print(arr2[1])
for number in arr:
  print(number)
for number in arr:
  print(number)

# 5
# O(n)2

for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr[1]+arr2[1])
print(arr2[2])

# 6 
# O(n2)
for number in arr:
  for number2 in arr:
    print(number+number2)
print(arr)

# 7 
# O(n)2

for number in arr:
  for number2 in arr2:
    for number3 in arr:
      print(number+number2+number3)
print(arr[1])
print(arr2[2])
print(arr2[3])

# 8
# O(n)2

for number in arr:
  print(number)
print(arr2)
for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr)





# 9 

# algoritma bubble sort

# 10

# algoritma linear search

# 11

# algoritma binary search

"""###link google colab team
1. Intan :
  link   : https://colab.research.google.com/drive/1meMjGYY69edkoObEmTeN1pVT079ErX4m?usp=sharing
2. Aji   : 
  link   : https://colab.research.google.com/drive/11fOIki1XroWIzljUNG8z7Mtp551bYk9m?usp=sharing#scrollTo=WItF84Uqh2R2
3. Irfan  : 
  link    : https://colab.research.google.com/drive/1is0_SYixYTH8qaYQhWAQ03ox64GDBG61?usp=sharing
"""